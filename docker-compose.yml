services:
  db:
    image: postgis/postgis:17-3.4
    container_name: db
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    volumes:
      - postgres-data:/var/lib/postgresql@17/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}" ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  test_db:
    image: postgis/postgis:17-3.4
    container_name: test_db
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=test_db
    volumes:
      - postgres-data:/var/lib/postgresql@17/data
    ports:
      - "5433:5432"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d test_db" ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  backend:
    build:
      context: ./backend
      target: backend
    container_name: backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      test_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${SQL_USER}:${SQL_PASSWORD}@db:5432/${SQL_DATABASE}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    volumes:
      - ./backend/app:/home/app/web/app
      - exports-volume:/home/app/web/app/exports
    env_file:
      - .env

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 5s
      timeout: 5s
      retries: 30

  export_worker:
    build:
      context: ./backend
      target: worker
    container_name: worker
    volumes:
      - exports-volume:/home/app/web/app/exports
      - ./backend/app/rabbitmq:/home/app/web/app/rabbitmq
    restart: unless-stopped
    depends_on:
      - db
      - rabbitmq
    env_file:
      - .env
    develop:
      watch:
        - action: sync+restart
          path: ./backend/app/rabbitmq/consumer.py
          target: ./backend/app/rabbitmq/consumer.py

volumes:
  postgres-data:
  exports-volume:
  rabbitmq-data:
